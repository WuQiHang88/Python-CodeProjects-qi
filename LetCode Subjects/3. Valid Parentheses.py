# 题目3：给定一个只包括 '('、')'、'{'、'}'、'['、']' 的字符串 s，判断字符串是否有效。
# 有效字符串需满足：
# 左括号必须用相同类型的右括号闭合。
# 左括号必须以正确的顺序闭合。
# 示例：
# 输入：s = "()[]{}"
# 输出：True
# 输入：s = "(]"
# 输出：False


def isValid(s):
    stack = []    # 用栈存储左括号，遇到右括号时检查是否匹配栈顶左括号
    pair_map = {')': '(', ']': '[', '}': '{'}   #构建一个哈希表，即把正确的映射关系，通过哈希表先表达出来

    for char in s:   #遍历字符串里的每个字符
        if char in pair_map:   #判断字符是否在哈希表的映射里，即判断哈希表里的键（‘)’，']','}'）是否存在
            if not stack or stack.pop() != pair_map[char]:  #如果这个栈没有与之相反的括号，或者从栈里出来的，与对应的映射不同（例如pair_map[')'] = '('）
                return False   #返回错误
        else:
            stack.append(char)  #如果不在哈希表的键中，即左括号，就把左括号添加到栈里
    # 最终栈为空则所有括号都匹配
    return not stack


print(isValid("{""}"))

##运行逻辑：
##要判断一个括号的符合是否有效，即格式是否正确（要这样“（”“）”，而不能“（”，“（”这样）或者这样（“{”，“）”）
##所以，首先得初始化，建立栈，和哈希表（以右括号为键，左括号为值，因为只有这样，格式才正确，否则就反了）
##然后设立一个判断，对哈希表及栈进行判断，有则输出结果，没有则入栈，以此往复