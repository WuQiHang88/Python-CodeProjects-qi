#题目2：判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
# 示例：
# 输入：x = 121
# 输出：True
# 输入：x = -121
# 输出：False（从左向右读为 -121，从右向左读为 121-，不匹配）


def isPalindrome(x):
    if x < 0 or (x % 10 == 0 and x != 0):  #首先，当数字x为负数，或者为10的倍数，或者为0时，就一定不会为回文数，所以此时就返false
        return False
    reversed_num = 0   #先给反转数字赋值为0
    while x > reversed_num:   #如果输入的数，大于反转数字，则执行以下操作
        reversed_num = reversed_num * 10 + x % 10  #其中%,表示取小数点后的数，这段代码是为了逐个获取x后面的数字，例如x = 121，第一次循环：0*10 + 121%10 = 1，x = 12 ；第二次循环：1*10 + 12%10 = 12 此时x<reversed_num,结束循环
        x //= 10    #//表示除数，但向下取整，例如10//3，值为3；5//2，值为2，在这里的意思//10，即表示去掉x最后面的一个数字
    return x == reversed_num or x == reversed_num // 10   #当x长度为偶数时，x == reversed_num；奇数时，x == reversed_num // 10（如121，x=1，reversed_num=12）


print(isPalindrome(101))

##整体逻辑如下：
##1. 先排除掉，一定不可能为回文数的情况
##2. 再通过取数逻辑，一步步取得x后面的数字
##3. 再用剩余的前面的数字，与后面的数字进行对比，当长度为偶数时（即x存在的数字字数）直接比较；当长度为奇数时，//10后再比较（即去掉x中间的那个数字）