# 题目1： 两数之和（Two Sum）
# 题目描述：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的两个整数，并返回它们的数组下标。
# 假设每种输入只会对应一个答案，且数组中同一个元素不能使用两遍。

# 示例：
# 输入：nums = [2, 7, 11, 15], target = 9
# 输出：[0, 1]
# 解释：因为 nums[0] + nums[1] = 2 + 7 = 9



def TwoSum(nums, target):
    num_map = {}  # 创建哈希表，其中名字是可以随便取的，只要包含有后面的中括号{}，就表示哈希表
    result = []  # 存储所有符合条件的下标对
    for i, num in enumerate(nums):  #遍历数组，其中i是下标，num是当前数值
        complement = target - num  #计算补数，比如当前num是2，则补数为9（target）-2 = 7
        if complement in num_map:  #查看补数是否在哈希表中，如果在，则执行以下操作
            # 将所有可能的组合添加到结果中
            for idx in num_map[complement]:  #遍历补数 complement 在数组中出现的所有下标。运行逻辑为：假设当前num_map = {2: [0], 7: [1], 8: [4], 1: [5]}，且num为1（下标为5），则补数complement为8，对应的下标为【4】，所以idx就赋值给4
                                             #则最后结果为【4（补数的下标），5（当前num的下标）】
                                             #其中，idx这个名字可以人员取

                result.append([idx, i])      #添加结果到result中
        # 使用列表存储所有重复值的下标
        if num in num_map:         #然后，判断数字是否存在与哈希表中
            num_map[num].append(i)  #如果存在，就把num_map[num]这个下标取出来，再把当前i添加进去，即追加下标，例如，num=[2, 7, 2]，第一个2对应下标为【0】，第二个2对应下标为【2】，则结果为：{2: [0, 2], 7: [1]}
        else:
            num_map[num] = [i]   ##如果不存在，则为这个数字新建下标
    return result

# TEST
nums = [2, 7, 11, 15, 8, 1, 4, 2]
target = 9
result = TwoSum(nums, target)
print(f"在数组{nums}中，两数之和{target}的下标是{result}")

#运行逻辑：
#1. 首先先创建哈希表————
#什么是哈希表？
#简单来说，就是一种映射关系，让不同的数据对应不同的下标，例如上面的例子：nums里的第一个数字2，可以给到下标【0】，这样下次需要2这个数字的时候，调下标【2】即可，其中，键为数字，值为下标
#2. 遍历过程
# 遍历数组，逐步填充哈希表
# 当 i=0，num=2 时：
# 补数 complement = 9-2=7
# 检查 7 是否在 num_map 中 → 不在（哈希表为空）
# 将 2 存入哈希表：num_map = {2: [0]}
#
# 当 i=1，num=7 时：
# 补数 complement = 9-7=2
# 检查 2 是否在 num_map 中 → 存在，值为 [0]
# 添加下标对 [0, 1] 到结果：result = [[0, 1]]
# 将 7 存入哈希表：num_map = {2: [0], 7: [1]}
#。。。。。。。。
# 当 i=7，num=2 时：
# 补数 complement = 9-2=7
# 检查 7 是否在 num_map 中 → 在
# 同时已有一个2在哈希表中
# 将 7 存入哈希表：num_map = {2: [0，7], 7: [1], 11: [2]}
#。。。。。。
# 将 1 存入哈希表：num_map = {2: [0，7], 7: [1], 11: [2], 15: [3], 8: [4], 1: [5]}
#3. 最后把result返回
